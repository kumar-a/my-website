<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Abhishek Kumar</title>
    <link>https://akumar.netlify.app/tag/r/</link>
      <atom:link href="https://akumar.netlify.app/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2022 Abhishek Kumar</copyright><lastBuildDate>Sat, 05 Feb 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://akumar.netlify.app/media/icon_hu63af8eaec43cac92558e0334cb2dff24_36198_512x512_fill_lanczos_center_3.png</url>
      <title>R</title>
      <link>https://akumar.netlify.app/tag/r/</link>
    </image>
    
    <item>
      <title>Meta-analytic models in Ecology</title>
      <link>https://akumar.netlify.app/post/meta-analytic-models-in-ecology/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://akumar.netlify.app/post/meta-analytic-models-in-ecology/</guid>
      <description>
&lt;script src=&#34;https://akumar.netlify.app/post/meta-analytic-models-in-ecology/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The overall aim of meta-analyses is to combine the effects or observations from different studies. There are three main types of meta-analytic models i.e., fixed-effect model (FEM), random-effects model (REM), and multilevel model (MLM), which are commonly used to compute the overall effect estimate in meta-analysis. Multilevel meta-analytic models account for non-independence due to studies, species and phylogenetic relatedness between species, which is common for ecological meta-analyses.&lt;/p&gt;
&lt;div id=&#34;fixed-effects-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fixed-effects model&lt;/h2&gt;
&lt;p&gt;The most basic fixed-effect or common-effect model can be mathematically expressed as Equation &lt;a href=&#34;#eq:mod1&#34;&gt;(1)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod1&#34;&gt;\[\begin{equation}
y_i = \mu + e_i; \quad 
\textbf{e} \sim \mathcal{N}(0, \textbf{V})
\tag{1}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; is the effect size for the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study (with &lt;span class=&#34;math inline&#34;&gt;\(i = 1, \ldots, N_{studies}\)&lt;/span&gt;) with corresponding sampling variance &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; is the overall meta-analytic mean, &lt;span class=&#34;math inline&#34;&gt;\(e_i\)&lt;/span&gt; is the sampling error for the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{e}\)&lt;/span&gt; is a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{studies}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(e_i\)&lt;/span&gt; values (which are assumed to be normally distributed with mean &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and variance &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt;), &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; is a column vector of zeros and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{V}\)&lt;/span&gt; is an &lt;span class=&#34;math inline&#34;&gt;\(N_{studies} \times N_{studies}\)&lt;/span&gt; matrix with the &lt;span class=&#34;math inline&#34;&gt;\(v_i\)&lt;/span&gt; values along the diagonal. However, this model is overly simplistic as it assumes homogeneity between studies which is far from the reality, at least for ecological studies.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-effects-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Random-effects model&lt;/h2&gt;
&lt;p&gt;In contrary to the fixed effect model, the assumptions of random-effects model are more realistic as it considers between-study heterogeneity. This model assumes that there is not only one actual effect size but a distribution of true effect sizes. According to this model, the observed effect size &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; deviates from the mean true effect size &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; for a single study &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; (with &lt;span class=&#34;math inline&#34;&gt;\(i = 1, \ldots , N_{studies}\)&lt;/span&gt;) by two error terms &lt;span class=&#34;math inline&#34;&gt;\(u_i\)&lt;/span&gt; (between-study heterogeneity) and &lt;span class=&#34;math inline&#34;&gt;\(e_i\)&lt;/span&gt; (sampling error). Thus, the random effects model can be expressed as Equation &lt;a href=&#34;#eq:mod2&#34;&gt;(2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod2&#34;&gt;\[\begin{equation}
y_i = \mu + u_i + e_i; \quad 
\textbf{u} \sim \mathcal{N}(0, \sigma_u^2 \textbf{I}_u)
\tag{2}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(u_i\)&lt;/span&gt; is the random effect corresponding to the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; estimate, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{u}\)&lt;/span&gt; is a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{studies}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(u_i\)&lt;/span&gt; values (which are assumed to be normally distributed with mean &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and variance &lt;span class=&#34;math inline&#34;&gt;\(\sigma_u^2\)&lt;/span&gt;) and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{I}_u\)&lt;/span&gt; is an &lt;span class=&#34;math inline&#34;&gt;\(N_{studies} \times N_{studies}\)&lt;/span&gt; identity matrix.&lt;/p&gt;
&lt;p&gt;Although the random-effects model is commonly used in ecology, it did not take into consideration the non-independence among effect sizes. The non-independence can arise when the effect sizes are shared by studies or species (i.e., multiple effect sizes from the same study or species). Further, phylogenetic relatedness among species can also introduce non-independence among the effect size estimates. This issue of non-independence can be addressed by using a multilevel (hierarchical) meta-analytic model, which considers a random effect at each level of variability in effect sizes. Among the several factor for non-independence of effect sizes, the dependence due to studies, species and phylogenetic relatedness among species are common in ecology.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-effects-model-at-study-level&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Random-effects model at study level&lt;/h2&gt;
&lt;p&gt;When a study provides more than one effect sizes, we have random effects at effect size (within studies) and study levels (between-study). To consider such non-independence due to studies, a multilevel model can be mathematically expressed as Equation &lt;a href=&#34;#eq:mod3&#34;&gt;(3)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod3&#34;&gt;\[\begin{equation}
y_{ij} = \mu + u_{ij} + s_i + e_{ij}; \quad 
\textbf{s} \sim \mathcal{N}(0, \sigma_s^2 \textbf{I}_s) 
\tag{3}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(y_{ij}\)&lt;/span&gt; denotes the &lt;span class=&#34;math inline&#34;&gt;\(j^{th}\)&lt;/span&gt; effect in the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study (with &lt;span class=&#34;math inline&#34;&gt;\(j = 1, \ldots, N_i\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(N_i\)&lt;/span&gt; is the number of effect sizes reported in the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study), &lt;span class=&#34;math inline&#34;&gt;\(v_{ij}\)&lt;/span&gt; are the corresponding sampling variances, and &lt;span class=&#34;math inline&#34;&gt;\(N_{total} = \sum_{i = 1}^{N_{studies}} N_i\)&lt;/span&gt; represents the total number of the effect sizes, &lt;span class=&#34;math inline&#34;&gt;\(u_{ij}\)&lt;/span&gt; is a random effect corresponding to the &lt;span class=&#34;math inline&#34;&gt;\(j^{th}\)&lt;/span&gt; effect size in the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study, &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; is a random effect at the study level, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{u}\)&lt;/span&gt; is now a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{total}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(u_{ij}\)&lt;/span&gt; values, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{s}\)&lt;/span&gt; is a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{studies}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; values (which are assumed to be normally distributed with mean &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and variance &lt;span class=&#34;math inline&#34;&gt;\(\sigma_s^2\)&lt;/span&gt;), and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{I}_u\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{I}_s\)&lt;/span&gt; are &lt;span class=&#34;math inline&#34;&gt;\(N_{total} \times N_{total}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(N_{studies} \times N_{studies}\)&lt;/span&gt; identity matrices, respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-effects-model-at-species-level&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Random-effects model at species level&lt;/h2&gt;
&lt;p&gt;However, the above model in Equation &lt;a href=&#34;#eq:mod3&#34;&gt;(3)&lt;/a&gt; did not considers non-independence due to species, which is prevalent in ecology and evolution. If effect sizes belong to different species, we can denote &lt;span class=&#34;math inline&#34;&gt;\(y_{ijk}\)&lt;/span&gt; as the &lt;span class=&#34;math inline&#34;&gt;\(j^{th}\)&lt;/span&gt; effect in the &lt;span class=&#34;math inline&#34;&gt;\(i^{th}\)&lt;/span&gt; study for the &lt;span class=&#34;math inline&#34;&gt;\(k^{th}\)&lt;/span&gt; species (with &lt;span class=&#34;math inline&#34;&gt;\(k = 1, \ldots, N_{species}\)&lt;/span&gt;). Then the multilevel model can include random effects at species level as expressed in Equation &lt;a href=&#34;#eq:mod4&#34;&gt;(4)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod4&#34;&gt;\[\begin{equation}
y_{ijk} = \mu + u_{ij} + s_i + n_k + e_{ij}; \quad 
\textbf{n} \sim \mathcal{N}(0, \sigma_n^2 \textbf{I}_n)
\tag{4}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(n_k\)&lt;/span&gt; is a species-specific random effect, &lt;span class=&#34;math inline&#34;&gt;\(\textbf{n}\)&lt;/span&gt; is a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{species}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(n_k\)&lt;/span&gt; values (which are assumed to be normally distributed with mean &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and between-species variance &lt;span class=&#34;math inline&#34;&gt;\(\sigma_n^2\)&lt;/span&gt;) and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{I}_n\)&lt;/span&gt; has dimensions &lt;span class=&#34;math inline&#34;&gt;\(N_{species} Ã N_{species}\)&lt;/span&gt;. In Equation &lt;a href=&#34;#eq:mod4&#34;&gt;(4)&lt;/a&gt;, &lt;span class=&#34;math inline&#34;&gt;\(n_k\)&lt;/span&gt; is considered as crossed random effect instead of nested random effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;random-effects-model-at-phylogenetic-relatedness-level&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Random-effects model at phylogenetic relatedness level&lt;/h2&gt;
&lt;p&gt;To account for non-independence due to phylogenetic relatedness, the multilevel model can be extended as Equation &lt;a href=&#34;#eq:mod5&#34;&gt;(5)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod5&#34;&gt;\[\begin{equation}
y_{ijk} = \mu + u_{ij} + s_i + n_k + p_k + e_{ij}; \quad
\textbf{p} \sim \mathcal{N}(0, \sigma_p^2 \textbf{A}) 
\tag{5}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where, &lt;span class=&#34;math inline&#34;&gt;\(p_k\)&lt;/span&gt; denotes the phylogenetic random effect for the &lt;span class=&#34;math inline&#34;&gt;\(k^{th}\)&lt;/span&gt; species,
&lt;span class=&#34;math inline&#34;&gt;\(\textbf{p}\)&lt;/span&gt; is a &lt;span class=&#34;math inline&#34;&gt;\(1 \times N_{species}\)&lt;/span&gt; column vector with the &lt;span class=&#34;math inline&#34;&gt;\(p_k\)&lt;/span&gt; values (which are assumed to follow a multivariate normal distribution with mean &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and varianceâcovariance matrix &lt;span class=&#34;math inline&#34;&gt;\(\sigma_p^2 \textbf{A}\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(\sigma_p^2\)&lt;/span&gt; denotes between-species variance due to the phylogeny, and &lt;span class=&#34;math inline&#34;&gt;\(\textbf{A}\)&lt;/span&gt; is the &lt;span class=&#34;math inline&#34;&gt;\(N_{species} \times N_{species}\)&lt;/span&gt; phylogenetic correlation matrix).&lt;/p&gt;
&lt;p&gt;The model in Equation &lt;a href=&#34;#eq:mod5&#34;&gt;(5)&lt;/a&gt; includes both non-phylogenetic (&lt;span class=&#34;math inline&#34;&gt;\(n_k\)&lt;/span&gt;) and phylogenetic(&lt;span class=&#34;math inline&#34;&gt;\(p_k\)&lt;/span&gt;) random effect due to species. Concerning the potential bias in estimated variances, we can simplify this model by removing the non-phylogenetic random effects as represented in Equation &lt;a href=&#34;#eq:mod6&#34;&gt;(6)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:mod6&#34;&gt;\[\begin{equation}
y_{ijk} = \mu + u_{ij} + s_i + p_k + e_{ij}; \quad
\textbf{p} \sim \mathcal{N}(0, \sigma_p^2 \textbf{A})
\tag{6}
\end{equation}\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparison plots in R</title>
      <link>https://akumar.netlify.app/post/comparison-plots-in-r/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://akumar.netlify.app/post/comparison-plots-in-r/</guid>
      <description>
&lt;script src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;iris&amp;quot;)
head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;bar-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bar plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.3.5     v purrr   0.3.4
## v tibble  3.1.6     v dplyr   1.0.7
## v tidyr   1.1.4     v stringr 1.4.0
## v readr   2.1.1     v forcats 0.5.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tibble&amp;#39; was built under R version 4.1.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyr&amp;#39; was built under R version 4.1.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;readr&amp;#39; was built under R version 4.1.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ------------------------------------------ tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- iris |&amp;gt; pivot_longer(cols = -Species, names_to = &amp;quot;variables&amp;quot;, values_to = &amp;quot;values&amp;quot;)

df |&amp;gt; ggplot(aes(x = variables, y = values)) +
    geom_bar(aes(fill = Species), stat = &amp;quot;identity&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df |&amp;gt; ggplot(aes(x = variables, y = values)) +
    geom_boxplot(aes(fill = Species, color = Species), alpha = 0.2, notch = F) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;violin-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Violin plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df |&amp;gt; ggplot(aes(x = variables, y = values)) +
    geom_violin(aes(fill = Species, color = Species), alpha = 0.2, trim = F) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df |&amp;gt; filter(variables == &amp;quot;Petal.Length&amp;quot;) |&amp;gt;
    ggplot(aes(x = Species, y = values)) +
    geom_violin(aes(fill = Species, color = Species), alpha = 0.2, trim = F) +
    scale_fill_brewer(palette = &amp;quot;Set1&amp;quot;) +
    scale_color_brewer(palette = &amp;quot;Set1&amp;quot;) +
    geom_boxplot(width = 0.15, coef = 0, outlier.alpha = 0.2) +
    stat_summary(pch = 23, color = &amp;quot;red&amp;quot;, fill = &amp;quot;white&amp;quot;, size = 0.75) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No summary function supplied, defaulting to `mean_se()`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;density-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Density plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df |&amp;gt; filter(variables == &amp;quot;Petal.Length&amp;quot;) |&amp;gt;
    ggplot(aes(x = values)) +
    geom_density(aes(fill = Species, color = Species), alpha = 0.2, size = 1) +
    scale_fill_brewer(palette = &amp;quot;Dark2&amp;quot;) +
    scale_color_brewer(palette = &amp;quot;Dark2&amp;quot;) +
    theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/comparison-plots-in-r/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making maps in R</title>
      <link>https://akumar.netlify.app/post/making-maps-in-r/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://akumar.netlify.app/post/making-maps-in-r/</guid>
      <description>
&lt;script src=&#34;https://akumar.netlify.app/post/making-maps-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;load-the-required-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;load the required packages&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)       # general data wrangling
library(raster)      # raster data
library(sf)          # spatial data handling
library(tmap)        # thematic mapping&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;download-and-prepare-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;download and prepare the data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## extract boundaries and data from OpenStreetMap
library(osmdata)

## define a bounding box for area of interest
osm_bbox &amp;lt;- c(76.8079, 30.6636, 77.5173, 31.0125) # xmin, ymin, xmax, ymax

## extract boundary of the protected area as sf from OpenStreetMap (osm)
protected_areas &amp;lt;- opq(osm_bbox) |&amp;gt;
  add_osm_feature(key = &amp;quot;boundary&amp;quot;, value = &amp;quot;protected_area&amp;quot;, value_exact = F) |&amp;gt;
  osmdata_sf()

## rename protected areas to short names and save to local file as gpkg
protected_areas$osm_polygons |&amp;gt; select(name, geometry) |&amp;gt;
  mutate(short_name = c(&amp;quot;CL&amp;quot;, &amp;quot;CD&amp;quot;, &amp;quot;MH&amp;quot;, &amp;quot;BS&amp;quot;, &amp;quot;SL&amp;quot;)) |&amp;gt;
  st_write(&amp;quot;data/protected_areas.gpkg&amp;quot;)

## extract rivers / streams (waterways) from osm as sf
waterways &amp;lt;- opq(osm_bbox) |&amp;gt; add_osm_feature(key = &amp;quot;waterway&amp;quot;) |&amp;gt; 
  osmdata_sf()

## save waterways to local file as gpkg
waterways$osm_lines |&amp;gt; select(name, waterway, geometry) |&amp;gt; 
  st_write(&amp;quot;data/waterways.gpkg&amp;quot;)

## extract roadways (highway) major roads from osm as sf
highways &amp;lt;- opq(osm_bbox) |&amp;gt; add_osm_feature(key = &amp;quot;highway&amp;quot;) |&amp;gt; 
  osmdata_sf()

## save roadways to local file as gpkg
highways$osm_lines |&amp;gt; select(name, highway, geometry) |&amp;gt; 
  st_write(&amp;quot;data/highways.gpkg&amp;quot;)

## load, merge, and crop pre-downloaded SRTM 30 m elevation data 
elev &amp;lt;- raster(&amp;quot;D:/spatial-data/dem/n30_e076_1arc_v3.tif&amp;quot;) |&amp;gt;
    merge(raster(&amp;quot;D:/spatial-data/dem/n30_e077_1arc_v3.tif&amp;quot;)) |&amp;gt; 
    merge(raster(&amp;quot;D:/spatial-data/dem/n31_e076_1arc_v3.tif&amp;quot;)) |&amp;gt; 
    merge(raster(&amp;quot;D:/spatial-data/dem/n31_e077_1arc_v3.tif&amp;quot;)) |&amp;gt; 
    crop(extent(76.8079, 77.5173, 30.6636, 31.0125))

## prepare and save hillshade
hillShade(
    # extract slope from elevation
    slope = terrain(elev, opt= &amp;quot;slope&amp;quot;),
    
    # extract aspect from elevation
    aspect = terrain(elev, opt= &amp;quot;aspect&amp;quot;), 
    
    # 45 altitude angle and 315 azimuth angle
    angle = 45, direction = 315) |&amp;gt; 
    writeRaster(&amp;quot;data/hill_shade.tif&amp;quot;)

## remove all files from environment
rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-the-prepared-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;load the prepared data&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;plot the map&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## add hillshade
tm_shape(hill_shade) + 
  tm_raster(palette = &amp;quot;-Greys&amp;quot;, n = 100, style = &amp;quot;cont&amp;quot;, legend.show = FALSE) +
  
  # add graticule
  tm_graticules(lwd = 1.5, col = &amp;quot;grey75&amp;quot;, labels.size = 0.85) + 
  
  # add protected areas
  tm_shape(protected_areas) + tm_fill(col = &amp;quot;green2&amp;quot;, alpha = 0.4) +  
  tm_borders(col = &amp;quot;seagreen&amp;quot;) +
    
    ## add rivers and streams
    tm_shape(rivers) + tm_lines(col = &amp;quot;dodgerblue&amp;quot;, lwd = 2) +
    tm_shape(streams) + tm_lines(col = &amp;quot;deepskyblue&amp;quot;, lwd = 1) +
  
    ## add major roads
    tm_shape(tertiary_roads) + tm_lines(col = &amp;quot;white&amp;quot;, lwd = 0.5) +
    tm_shape(secondary_roads) + tm_lines(col = &amp;quot;white&amp;quot;, lwd = 1) +
    tm_shape(trunk_roads) + tm_lines(col = &amp;quot;white&amp;quot;, lwd = 2) +
    
  ## add legend
  tm_add_legend(type = &amp;quot;fill&amp;quot;, labels = &amp;quot;Protected area&amp;quot;, col = &amp;quot;green2&amp;quot;,
                alpha = 0.4, border.col = &amp;quot;seagreen&amp;quot;) +
    tm_add_legend(type = &amp;quot;line&amp;quot;, labels = &amp;quot;Roads&amp;quot;, col = &amp;quot;white&amp;quot;, 
                lwd = 2) +
  tm_add_legend(type = &amp;quot;line&amp;quot;, labels = &amp;quot;Rivers&amp;quot;, col = &amp;quot;skyblue&amp;quot;, lwd = 2) +
    
    
  ## add compass and scale bar
    tm_compass(position = c(0.89, 0.8), size = 2.5, bg.color = &amp;quot;grey90&amp;quot;, 
               bg.alpha = 0.7) +
    tm_scale_bar(position = c(0.6, 0.01), breaks = c(0, 10, 20), text.size = 0.75,
                 bg.color = &amp;quot;grey90&amp;quot;, bg.alpha = 0.7) +
    
  ## adjust layout
    tm_layout(frame.double.line = T, compass.type = &amp;quot;arrow&amp;quot;, 
            legend.position = c(0.015, 0.7), legend.bg.color = &amp;quot;grey90&amp;quot;, 
            legend.bg.alpha = 0.7, 
            main.title.position = &amp;quot;center&amp;quot;,
            legend.text.size = 0.85) &lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:fig1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://akumar.netlify.app/post/making-maps-in-r/index_files/figure-html/fig1-1.png&#34; alt=&#34;Location and topography of selected protected areas. The map is prepared in `R` programming environment using the package `tmap`&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Location and topography of selected protected areas. The map is prepared in &lt;code&gt;R&lt;/code&gt; programming environment using the package &lt;code&gt;tmap&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## remove all variables from the environment
rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Plotting rasters in R</title>
      <link>https://akumar.netlify.app/post/plotting-rasters-in-r/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://akumar.netlify.app/post/plotting-rasters-in-r/</guid>
      <description>
&lt;script src=&#34;https://akumar.netlify.app/post/plotting-rasters-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;load-required-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;load required packages&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)      # raster data
library(rasterVis)   # raster data visualisation
library(rgee)        # Google Earth Engine in R
library(sf)          # spatial data handling
library(tidyverse)   # general data wrangling and visualisation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-landcover-data-from-google-earth-engine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Landcover data from Google Earth Engine&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load the package rgee
library(rgee)

## initialize google earth engine in R
ee_Initialize(drive = T)

## define a region of interest
roi &amp;lt;- ee$Geometry$Rectangle(76.8100, 30.6676, 77.0010, 30.8084)

## load and clip ESA WorldCover 2020 data
landcover2020 &amp;lt;- ee$ImageCollection(&amp;quot;ESA/WorldCover/v100&amp;quot;)$
  # select the first image
  first()$
  # clip to region of interest
  clip(roi)

## Move results from Earth Engine to Drive
task_img &amp;lt;- ee_image_to_drive(
  image = landcover2020,
  folder = &amp;quot;rgee_backup&amp;quot;,
  fileFormat = &amp;quot;GEO_TIFF&amp;quot;,
  region = roi,
  fileNamePrefix = &amp;quot;landcover_2020&amp;quot;
)

task_img$start()
ee_monitoring(task_img)

## Move results from Drive to local
img &amp;lt;- ee_drive_to_local(task = task_img, dsn = &amp;quot;data/lc2020.tif&amp;quot;)

## deauthorise google drive
googledrive::drive_deauth()

## remove all variables from environment
rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;base-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;base R&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mwls_lc &amp;lt;- raster(&amp;quot;data/lc2020.tif&amp;quot;)
plot(mwls_lc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/plotting-rasters-in-r/index_files/figure-html/unnamed-chunk-2-1.svg&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;img src=&#34;https://akumar.netlify.app/post/plotting-rasters-in-r/index_files/figure-html/unnamed-chunk-2-2.svg&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lattice-levelplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;lattice levelplot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)
library(rasterVis)

## data from ESA WorldCover 2020 
mwls_lc &amp;lt;- raster(&amp;quot;data/lc2020.tif&amp;quot;)

levels(mwls_lc) &amp;lt;- data.frame(
    ID = c(seq(10, 60, 10), 80),
    landcover = c(&amp;quot;Trees&amp;quot;, &amp;quot;Shrubland&amp;quot;, &amp;quot;Grassland&amp;quot;, &amp;quot;Cropland&amp;quot;, &amp;quot;Built-up&amp;quot;, 
             &amp;quot;Barren/Sparse \n Vegetation&amp;quot;, &amp;quot;Open water&amp;quot;)
    )

levelplot(mwls_lc, att=&amp;#39;landcover&amp;#39;,
          col.regions = c(&amp;quot;#006400&amp;quot;, &amp;quot;#FFBB22&amp;quot;, &amp;quot;#FFFF4C&amp;quot;, &amp;quot;#F096FF&amp;quot;, &amp;quot;#FA0000&amp;quot;, 
                          &amp;quot;#B4B4B4&amp;quot;, &amp;quot;#0064C8&amp;quot;),
          colorkey = list(height = 1, labels = list(cex = 1.2)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/plotting-rasters-in-r/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ggplot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
## data from ESA WorldCover 2020 
mwls_lc &amp;lt;- raster(&amp;quot;data/lc2020.tif&amp;quot;)

## a function to convert raster to dataframe
rasterdf &amp;lt;- function(x, aggregate = 1){
    resampleFactor &amp;lt;- aggregate
    inputRaster &amp;lt;- x    
    inCols &amp;lt;- ncol(inputRaster)
    inRows &amp;lt;- nrow(inputRaster)
    
    # Compute numbers of columns and rows in the new raster for mapping
    resampledRaster &amp;lt;- raster(ncol = (inCols / resampleFactor),
                              nrow = (inRows / resampleFactor))
    
    # Match to the extent of the original raster
    extent(resampledRaster) &amp;lt;- extent(inputRaster)
   
    # Resample data on the new raster
    y &amp;lt;- resample(inputRaster, resampledRaster, method=&amp;#39;ngb&amp;#39;)
   
    # Extract cell coordinates  
    coords &amp;lt;- xyFromCell(y, seq_len(ncell(y)))
    dat &amp;lt;- stack(as.data.frame(getValues(y)))
    
    # Add names - &amp;#39;value&amp;#39; for data, &amp;#39;variable&amp;#39; to indicate different raster layers
    # in a stack
    names(dat) &amp;lt;- c(&amp;#39;value&amp;#39;, &amp;#39;variable&amp;#39;)
    dat &amp;lt;- cbind(coords, dat)
    dat
}

## convert raster to data frame
mwls_df &amp;lt;- rasterdf(mwls_lc)

## prepare legend
LCcodes &amp;lt;- c(seq(10, 90, 10), 95, 100)
LCnames &amp;lt;- c(&amp;quot;Trees&amp;quot;, &amp;quot;Shrubland&amp;quot;, &amp;quot;Grassland&amp;quot;, &amp;quot;Cropland&amp;quot;, &amp;quot;Built-up&amp;quot;, 
             &amp;quot;Barren/Sparse Vegetation&amp;quot;, &amp;quot;Snow and Ice&amp;quot;, &amp;quot;Open water&amp;quot;,
             &amp;quot;Herbaceous wetland&amp;quot;, &amp;quot;Mangroves&amp;quot;, &amp;quot;Moss and lichen&amp;quot;)
LCcolors &amp;lt;- attr(mwls_lc, &amp;quot;legend&amp;quot;)@colortable[LCcodes + 1]
names(LCcolors) &amp;lt;- as.character(LCcodes)

## plot the map
ggplot(data = mwls_df) +
  geom_raster(aes(x = x, y = y, fill = as.character(value))) + 
  scale_fill_manual(name = &amp;quot;Land cover&amp;quot;,
                    values = LCcolors[-c(7, 9:11)],
                    labels = LCnames[-c(7, 9:11)],
                    na.translate = FALSE) +
  coord_sf(expand = F) +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        panel.background = element_rect(fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://akumar.netlify.app/post/plotting-rasters-in-r/index_files/figure-html/lc-1.svg&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
## remove all variables from the environment
rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
